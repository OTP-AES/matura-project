This is pdfTeX, Version 3.14159265-2.6-1.40.17 (MiKTeX 2.9) (preloaded format=pdflatex 2016.8.3)  27 AUG 2016 17:39
entering extended mode
**./OTPandAES.tex
(OTPandAES.tex
LaTeX2e <2016/03/31> patch level 1
Babel <3.9r> and hyphenation patterns for 75 language(s) loaded.
(E:\miketex\tex\latex\base\report.cls
Document Class: report 2014/09/29 v1.4h Standard LaTeX document class
(E:\miketex\tex\latex\base\size12.clo
File: size12.clo 2014/09/29 v1.4h Standard LaTeX file (size option)
)
\c@part=\count79
\c@chapter=\count80
\c@section=\count81
\c@subsection=\count82
\c@subsubsection=\count83
\c@paragraph=\count84
\c@subparagraph=\count85
\c@figure=\count86
\c@table=\count87
\abovecaptionskip=\skip41
\belowcaptionskip=\skip42
\bibindent=\dimen102
)
(E:\miketex\tex\latex\graphics\graphicx.sty
Package: graphicx 2014/10/28 v1.0g Enhanced LaTeX Graphics (DPC,SPQR)

(E:\miketex\tex\latex\graphics\keyval.sty
Package: keyval 2014/10/28 v1.15 key=value parser (DPC)
\KV@toks@=\toks14
)
(E:\miketex\tex\latex\graphics\graphics.sty
Package: graphics 2016/06/02 v1.0s Standard LaTeX Graphics (DPC,SPQR)

(E:\miketex\tex\latex\graphics\trig.sty
Package: trig 2016/01/03 v1.10 sin cos tan (DPC)
)
(E:\miketex\tex\latex\00miktex\graphics.cfg
File: graphics.cfg 2016/06/04 v1.11 sample graphics configuration
)
Package graphics Info: Driver file: pdftex.def on input line 99.

(E:\miketex\tex\latex\pdftex-def\pdftex.def
File: pdftex.def 2016/06/17 v0.06h Graphics/color for pdfTeX

(E:\miketex\tex\generic\oberdiek\infwarerr.sty
Package: infwarerr 2016/05/16 v1.4 Providing info/warning/error messages (HO)
)
(E:\miketex\tex\generic\oberdiek\ltxcmds.sty
Package: ltxcmds 2016/05/16 v1.23 LaTeX kernel commands for general use (HO)
)
\Gread@gobject=\count88
))
\Gin@req@height=\dimen103
\Gin@req@width=\dimen104
)
(E:\miketex\tex\latex\float\float.sty
Package: float 2001/11/08 v1.3d Float enhancements (AL)
\c@float@type=\count89
\float@exts=\toks15
\float@box=\box26
\@float@everytoks=\toks16
\@floatcapt=\box27
)
(E:\miketex\tex\latex\biblatex\biblatex.sty
Package: biblatex 2016/05/14 v3.4 programmable bibliographies (PK/JW/AB)

(E:\miketex\tex\latex\iftex\iftex.sty
Package: iftex 2013/04/04 v0.2 Provides if(tex) conditional for PDFTeX, XeTeX, 
and LuaTeX
)
(E:\miketex\tex\generic\oberdiek\pdftexcmds.sty
Package: pdftexcmds 2016/05/21 v0.22 Utility functions of pdfTeX for LuaTeX (HO
)

(E:\miketex\tex\generic\oberdiek\ifluatex.sty
Package: ifluatex 2016/05/16 v1.4 Provides the ifluatex switch (HO)
Package ifluatex Info: LuaTeX not detected.
)
(E:\miketex\tex\generic\oberdiek\ifpdf.sty
Package: ifpdf 2016/05/14 v3.1 Provides the ifpdf switch
)
Package pdftexcmds Info: LuaTeX not detected.
Package pdftexcmds Info: \pdf@primitive is available.
Package pdftexcmds Info: \pdf@ifprimitive is available.
Package pdftexcmds Info: \pdfdraftmode found.
)
(E:\miketex\tex\latex\etoolbox\etoolbox.sty
Package: etoolbox 2015/08/02 v2.2a e-TeX tools for LaTeX (JAW)
\etb@tempcnta=\count90
)
(E:\miketex\tex\latex\oberdiek\kvoptions.sty
Package: kvoptions 2016/05/16 v3.12 Key value format for package options (HO)

(E:\miketex\tex\generic\oberdiek\kvsetkeys.sty
Package: kvsetkeys 2016/05/16 v1.17 Key value parser (HO)

(E:\miketex\tex\generic\oberdiek\etexcmds.sty
Package: etexcmds 2016/05/16 v1.6 Avoid name clashes with e-TeX commands (HO)
Package etexcmds Info: Could not find \expanded.
(etexcmds)             That can mean that you are not using pdfTeX 1.50 or
(etexcmds)             that some package has redefined \expanded.
(etexcmds)             In the latter case, load this package earlier.
)))
(E:\miketex\tex\latex\logreq\logreq.sty
Package: logreq 2010/08/04 v1.0 xml request logger
\lrq@indent=\count91
 (E:\miketex\tex\latex\logreq\logreq.def
File: logreq.def 2010/08/04 v1.0 logreq spec v1.0
)) (E:\miketex\tex\latex\base\ifthen.sty
Package: ifthen 2014/09/29 v1.1c Standard LaTeX ifthen package (DPC)
) (E:\miketex\tex\latex\url\url.sty
\Urlmuskip=\muskip10
Package: url 2013/09/16  ver 3.4  Verb mode for urls, etc.
)
(E:\miketex\tex\latex\xstring\xstring.sty
(E:\miketex\tex\generic\xstring\xstring.tex
\@xs@message=\write3
\integerpart=\count92
\decimalpart=\count93
)
Package: xstring 2013/10/13  v1.7c  String manipulations (C Tellechea)
)
\c@tabx@nest=\count94
\c@listtotal=\count95
\c@listcount=\count96
\c@liststart=\count97
\c@liststop=\count98
\c@citecount=\count99
\c@citetotal=\count100
\c@multicitecount=\count101
\c@multicitetotal=\count102
\c@instcount=\count103
\c@maxnames=\count104
\c@minnames=\count105
\c@maxitems=\count106
\c@minitems=\count107
\c@citecounter=\count108
\c@savedcitecounter=\count109
\c@uniquelist=\count110
\c@uniquename=\count111
\c@refsection=\count112
\c@refsegment=\count113
\c@maxextratitle=\count114
\c@maxextratitleyear=\count115
\c@maxextrayear=\count116
\c@maxextraalpha=\count117
\c@abbrvpenalty=\count118
\c@highnamepenalty=\count119
\c@lownamepenalty=\count120
\c@maxparens=\count121
\c@parenlevel=\count122
\blx@tempcnta=\count123
\blx@tempcntb=\count124
\blx@tempcntc=\count125
\blx@maxsection=\count126
\blx@maxsegment@0=\count127
\blx@notetype=\count128
\blx@parenlevel@text=\count129
\blx@parenlevel@foot=\count130
\blx@sectionciteorder@0=\count131
\labelnumberwidth=\skip43
\labelalphawidth=\skip44
\biblabelsep=\skip45
\bibitemsep=\skip46
\bibnamesep=\skip47
\bibinitsep=\skip48
\bibparsep=\skip49
\bibhang=\skip50
\blx@bcfin=\read1
\blx@bcfout=\write4
\c@mincomprange=\count132
\c@maxcomprange=\count133
\c@mincompwidth=\count134
Package biblatex Info: Trying to load biblatex default data model...
Package biblatex Info: ... file 'blx-dm.def' found.

(E:\miketex\tex\latex\biblatex\blx-dm.def)
Package biblatex Info: Trying to load biblatex style data model...
Package biblatex Info: ... file 'numeric.dbx' not found.
Package biblatex Info: Trying to load biblatex custom data model...
Package biblatex Info: ... file 'biblatex-dm.cfg' not found.
\c@afterword=\count135
\c@savedafterword=\count136
\c@annotator=\count137
\c@savedannotator=\count138
\c@author=\count139
\c@savedauthor=\count140
\c@bookauthor=\count141
\c@savedbookauthor=\count142
\c@commentator=\count143
\c@savedcommentator=\count144
\c@editor=\count145
\c@savededitor=\count146
\c@editora=\count147
\c@savededitora=\count148
\c@editorb=\count149
\c@savededitorb=\count150
\c@editorc=\count151
\c@savededitorc=\count152
\c@foreword=\count153
\c@savedforeword=\count154
\c@holder=\count155
\c@savedholder=\count156
\c@introduction=\count157
\c@savedintroduction=\count158
\c@namea=\count159
\c@savednamea=\count160
\c@nameb=\count161
\c@savednameb=\count162
\c@namec=\count163
\c@savednamec=\count164
\c@translator=\count165
\c@savedtranslator=\count166
\c@shortauthor=\count167
\c@savedshortauthor=\count168
\c@shorteditor=\count169
\c@savedshorteditor=\count170
\c@labelname=\count171
\c@savedlabelname=\count172
\c@institution=\count173
\c@savedinstitution=\count174
\c@lista=\count175
\c@savedlista=\count176
\c@listb=\count177
\c@savedlistb=\count178
\c@listc=\count179
\c@savedlistc=\count180
\c@listd=\count181
\c@savedlistd=\count182
\c@liste=\count183
\c@savedliste=\count184
\c@listf=\count185
\c@savedlistf=\count186
\c@location=\count187
\c@savedlocation=\count188
\c@organization=\count189
\c@savedorganization=\count190
\c@origlocation=\count191
\c@savedoriglocation=\count192
\c@origpublisher=\count193
\c@savedorigpublisher=\count194
\c@publisher=\count195
\c@savedpublisher=\count196
\c@language=\count197
\c@savedlanguage=\count198
\c@pageref=\count199
\c@savedpageref=\count266
\shorthandwidth=\skip51
\shortjournalwidth=\skip52
\shortserieswidth=\skip53
\shorttitlewidth=\skip54
\shortauthorwidth=\skip55
\shorteditorwidth=\skip56
Package biblatex Info: Trying to load compatibility code...
Package biblatex Info: ... file 'blx-compat.def' found.

(E:\miketex\tex\latex\biblatex\blx-compat.def
File: blx-compat.def 2016/05/14 v3.4 biblatex compatibility (PK/JW/AB)
)
Package biblatex Info: Trying to load BibTeX backend compatibility...
Package biblatex Info: ... file 'blx-bibtex.def' found.

(E:\miketex\tex\latex\biblatex\blx-bibtex.def
File: blx-bibtex.def 2016/05/14 v3.4 biblatex compatibility (PK/JW/AB)


Package biblatex Warning: Using fall-back BibTeX(8) backend:
(biblatex)                functionality may be reduced/unavailable.

)
Package biblatex Info: Trying to load generic definitions...
Package biblatex Info: ... file 'biblatex.def' found.
 (E:\miketex\tex\latex\biblatex\biblatex.def
File: biblatex.def 2016/05/14 v3.4 biblatex compatibility (PK/JW/AB)
\c@textcitecount=\count267
\c@textcitetotal=\count268
\c@textcitemaxnames=\count269
\c@biburlnumpenalty=\count270
\c@biburlucpenalty=\count271
\c@biburllcpenalty=\count272
\c@smartand=\count273
)
Package biblatex Info: Trying to load bibliography style 'numeric'...
Package biblatex Info: ... file 'numeric.bbx' found.

(E:\miketex\tex\latex\biblatex\bbx\numeric.bbx
File: numeric.bbx 2016/05/14 v3.4 biblatex bibliography style (PK/JW/AB)
Package biblatex Info: Trying to load bibliography style 'standard'...
Package biblatex Info: ... file 'standard.bbx' found.

(E:\miketex\tex\latex\biblatex\bbx\standard.bbx
File: standard.bbx 2016/05/14 v3.4 biblatex bibliography style (PK/JW/AB)
\c@bbx:relatedcount=\count274
\c@bbx:relatedtotal=\count275
))
Package biblatex Info: Trying to load citation style 'numeric'...
Package biblatex Info: ... file 'numeric.cbx' found.

(E:\miketex\tex\latex\biblatex\cbx\numeric.cbx
File: numeric.cbx 2016/05/14 v3.4 biblatex citation style (PK/JW/AB)
Package biblatex Info: Redefining '\cite'.
Package biblatex Info: Redefining '\parencite'.
Package biblatex Info: Redefining '\footcite'.
Package biblatex Info: Redefining '\footcitetext'.
Package biblatex Info: Redefining '\smartcite'.
Package biblatex Info: Redefining '\supercite'.
Package biblatex Info: Redefining '\textcite'.
Package biblatex Info: Redefining '\textcites'.
Package biblatex Info: Redefining '\cites'.
Package biblatex Info: Redefining '\parencites'.
Package biblatex Info: Redefining '\smartcites'.
)
Package biblatex Info: Trying to load configuration file...
Package biblatex Info: ... file 'biblatex.cfg' found.

(E:\miketex\tex\latex\biblatex\biblatex.cfg
File: biblatex.cfg 
))
Package biblatex Info: Trying to load language 'english'...
Package biblatex Info: ... file 'english.lbx' found.

(E:\miketex\tex\latex\biblatex\lbx\english.lbx
File: english.lbx 2016/05/14 v3.4 biblatex localization (PK/JW/AB)
)
\@quotelevel=\count276
\@quotereset=\count277
 (OTPandAES.aux)
\openout1 = `OTPandAES.aux'.

LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 16.
LaTeX Font Info:    ... okay on input line 16.
LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 16.
LaTeX Font Info:    ... okay on input line 16.
LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 16.
LaTeX Font Info:    ... okay on input line 16.
LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 16.
LaTeX Font Info:    ... okay on input line 16.
LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 16.
LaTeX Font Info:    ... okay on input line 16.
LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 16.
LaTeX Font Info:    ... okay on input line 16.

(E:\miketex\tex\context\base\supp-pdf.mkii
[Loading MPS to PDF converter (version 2006.09.02).]
\scratchcounter=\count278
\scratchdimen=\dimen105
\scratchbox=\box28
\nofMPsegments=\count279
\nofMParguments=\count280
\everyMPshowfont=\toks17
\MPscratchCnt=\count281
\MPscratchDim=\dimen106
\MPnumerator=\count282
\makeMPintoPDFobject=\count283
\everyMPtoPDFconversion=\toks18
) (E:\miketex\tex\latex\oberdiek\epstopdf-base.sty
Package: epstopdf-base 2016/05/15 v2.6 Base part for package epstopdf

(E:\miketex\tex\latex\oberdiek\grfext.sty
Package: grfext 2016/05/16 v1.2 Manage graphics extensions (HO)

(E:\miketex\tex\generic\oberdiek\kvdefinekeys.sty
Package: kvdefinekeys 2016/05/16 v1.4 Define keys (HO)
))
Package epstopdf-base Info: Redefining graphics rule for `.eps' on input line 4
38.
Package grfext Info: Graphics extension search list:
(grfext)             [.png,.pdf,.jpg,.mps,.jpeg,.jbig2,.jb2,.PNG,.PDF,.JPG,.JPE
G,.JBIG2,.JB2,.eps]
(grfext)             \AppendGraphicsExtensions on input line 456.
)
Package biblatex Info: No input encoding detected.
(biblatex)             Assuming 'ascii'.
Package biblatex Info: Automatic encoding selection.
(biblatex)             Assuming data encoding 'ascii'.
Package biblatex Info: Input encoding 'ascii' specified.
Package biblatex Info: Data encoding 'ascii' specified.
(biblatex)             No need to reencode data.
\openout4 = `OTPandAES-blx.bib'.

Package biblatex Info: Trying to load bibliographic data...
Package biblatex Info: ... file 'OTPandAES.bbl' found.
 (OTPandAES.bbl
! Use of \blx@bbl@verbadd@i doesn't match its definition.
l.87     \verb
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

)
Package biblatex Info: Reference section=0 on input line 16.
Package biblatex Info: Reference segment=0 on input line 16.

Overfull \hbox (7.21115pt too wide) in paragraph at lines 88--17
[]\OT1/cmr/m/n/12   http://crypto.stackexchange.com/questions/3896/simply-put-w
hat-does-
 []


Overfull \hbox (143.83612pt too wide) in paragraph at lines 88--17
\OT1/cmr/m/n/12 per    \verb fect-secrecy-mean    \endverb    \field{year}{2
014}  \endentry\endsortlist\endinput 
 []

[1

{C:/Users/Valdemar/AppData/Local/MiKTeX/2.9/pdftex/config/pdftex.map}]
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <14.4> on input line 20.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <7> on input line 20.

[1] (OTPandAES.toc)
\tf@toc=\write5
\openout5 = `OTPandAES.toc'.

 [1

]
Chapter 1.
<images/PerforatedTape.jpg, id=14, 433.37122pt x 288.95561pt>
File: images/PerforatedTape.jpg Graphic file (type jpg)

<use images/PerforatedTape.jpg>
Package pdftex.def Info: images/PerforatedTape.jpg used on input line 33.
(pdftex.def)             Requested size: 216.68507pt x 144.47745pt.
 [2

] [3 <./images/PerforatedTape.jpg>]
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <12> on input line 54.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <8> on input line 54.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <6> on input line 54.
 [4]
<images/Table1.PNG, id=26, 433.62pt x 42.91031pt>
File: images/Table1.PNG Graphic file (type png)
 <use images/Table1.PNG>
Package pdftex.def Info: images/Table1.PNG used on input line 60.
(pdftex.def)             Requested size: 433.61894pt x 42.91019pt.

Overfull \hbox (43.61894pt too wide) in paragraph at lines 60--61
 [][] 
 []

<images/Table2.PNG, id=28, 436.63126pt x 39.14626pt>
File: images/Table2.PNG Graphic file (type png)
 <use images/Table2.PNG>
Package pdftex.def Info: images/Table2.PNG used on input line 67.
(pdftex.def)             Requested size: 436.63019pt x 39.14615pt.

Overfull \hbox (46.63019pt too wide) in paragraph at lines 67--68
 [][] 
 []

<images/Table3.PNG, id=29, 450.9347pt x 67.0003pt>
File: images/Table3.PNG Graphic file (type png)
 <use images/Table3.PNG>
Package pdftex.def Info: images/Table3.PNG used on input line 74.
(pdftex.def)             Requested size: 450.9336pt x 67.00012pt.

Overfull \hbox (60.9336pt too wide) in paragraph at lines 74--75
 [][] 
 []

[5 <./images/Table1.PNG> <./images/Table2.PNG> <./images/Table3.PNG>]
<images/Table4.PNG, id=37, 446.41782pt x 68.50594pt>
File: images/Table4.PNG Graphic file (type png)
 <use images/Table4.PNG>
Package pdftex.def Info: images/Table4.PNG used on input line 84.
(pdftex.def)             Requested size: 446.41672pt x 68.50577pt.

Overfull \hbox (56.41672pt too wide) in paragraph at lines 84--85
 [][] 
 []

[6 <./images/Table4.PNG>]
Overfull \hbox (1.72371pt too wide) in paragraph at lines 95--96
[]\OT1/cmr/m/n/12 Although many be-lieve that the ci-pher-text does pro-vide in
-for-ma-tion about
 []

[7]
! Missing \endcsname inserted.
<to be read again> 
                   \let 
l.111 \end
          {document}
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Missing \endcsname inserted.
<to be read again> 
                   \let 
l.111 \end
          {document}
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Undefined control sequence.
<argument> \let \blx@theformat 
                               \@firstofone 
l.111 \end
          {document}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Extra \fi.
\@ifnch ...e \let \reserved@c \reserved@b \fi \fi 
                                                  \reserved@c 
l.111 \end
          {document}
I'm ignoring this; it doesn't match any \if.

! Missing number, treated as zero.
<to be read again> 
                   l
l.111 \end
          {document}
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   l
l.111 \end
          {document}
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, nd, nc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra \endcsname.
<argument> ...printfield {labelnumber}}\endcsname 
                                                  \NewCount \relax \def \exp...
l.111 \end
          {document}
I'm ignoring this, since I wasn't doing a \csname.

! Extra \endcsname.
<argument> ...printfield {labelnumber}}\endcsname 
                                                  {\expandonce \NewValue }}
l.111 \end
          {document}
I'm ignoring this, since I wasn't doing a \csname.

! Use of \expandafter doesn't match its definition.
\expandonce #1->\unexpanded \expandafter {
                                          #1}
l.111 \end
          {document}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Missing { inserted.
<to be read again> 
                   \let 
l.111 \end
          {document}
A left brace was mandatory here, so I've put one in.
You might want to delete and/or insert some corrections
so that I will find a matching right brace soon.
(If you're confused by all this, try typing `I}' now.)

! Argument of \renew@command has an extra }.
<inserted text> 
                \par 
l.111 \end
          {document}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \renew@command was complete.
<to be read again> 
                   \par 
l.111 \end
          {document}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Extra }, or forgotten \endgroup.
<argument> ...\endcsname {\expandonce \NewValue }}
                                                  
l.111 \end
          {document}
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Argument of \makelabel has an extra }.
<inserted text> 
                \par 
l.111 \end
          {document}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \makelabel was complete.
<to be read again> 
                   \par 
l.111 \end
          {document}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `macro parameter character #' in horizontal mode.
\blx@env@bibliography ...*{\makelabel }[1]{\hss ##
                                                  1}
l.111 \end
          {document}
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Use of \expandafter doesn't match its definition.
\blx@listloop #1->\expandafter \blx@listloop@i 
                                               #1|&
l.111 \end
          {document}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Infinite glue shrinkage found in a paragraph.
\blx@listloop #1->\expandafter \blx@listloop@i #1|
                                                  &
l.111 \end
          {document}
The paragraph just ended includes some glue that has
infinite shrinkability, e.g., `\hskip 0pt minus 1fil'.
Such glue doesn't belong there---it allows a paragraph
of any length to fit on one line. But it's safe to proceed,
since the offensive shrinkability has been made finite.

! Display math should end with $$.
<to be read again> 
                   \let 
l.111 \end{document}
                    
The `$' that I just saw supposedly matches a previous `$$'.
So I shall assume that you typed `$$' both times.

! Use of \expandafter doesn't match its definition.
\ifundef ...oftwo \else \expandafter \expandafter 
                                                  \expandafter \@secondoftwo...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifundef ...xpandafter \expandafter \@secondoftwo 
                                                  \fi \else \expandafter \@f...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\expandonce #1->\unexpanded \expandafter {
                                          #1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Missing { inserted.
<to be read again> 
                   \begingroup 
l.111 \end{document}
                    
A left brace was mandatory here, so I've put one in.
You might want to delete and/or insert some corrections
so that I will find a matching right brace soon.
(If you're confused by all this, try typing `I}' now.)

! Use of \expandafter doesn't match its definition.
\forlistloop #1#2->\expandafter \etb@forlistloop 
                                                 \expandafter {#2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\forlistloop ...er \etb@forlistloop \expandafter {
                                                  #2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra }, or forgotten \endgroup.
\forlistloop ...\etb@forlistloop \expandafter {#2}
                                                  {#1}
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Argument of \do has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \expandafter doesn't match its definition.
\ifinlist ...@firstoftwo }\expandafter \etb@tempa 
                                                  \expandafter |#2|#1|&
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifinlist ...expandafter \etb@tempa \expandafter |
                                                  #2|#1|&
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifdefmacro #1->\expandafter \etb@ifdefmacro 
                                             \meaning #1macro:&
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifdefmacro #1->\expandafter \etb@ifdefmacro 
                                             \meaning #1macro:&
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Missing } inserted.
<inserted text> 
                }
l.111 \end{document}
                    
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Use of \expandafter doesn't match its definition.
\ifdefstrequal ...mpa {\expandafter \strip@prefix 
                                                  \meaning #1}\edef \etb@tem...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifdefstrequal ...mpb {\expandafter \strip@prefix 
                                                  \meaning #2}\ifx \etb@temp...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Argument of \@firstoftwo has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoftwo was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Overfull \hbox (442.47733pt too wide) in paragraph at lines 111--111
\OT1/cmr/m/n/12 macro:->VernamPatent|HutSix|FrequencyAnalysis|PerfectSecrecy|ma
cro:$[]$ 
 []

! Argument of \@secondoftwo has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@secondoftwo was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@secondoftwo has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@secondoftwo was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \expandafter doesn't match its definition.
\ifinlist ...@firstoftwo }\expandafter \etb@tempa 
                                                  \expandafter |#2|#1|&
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifinlist ...expandafter \etb@tempa \expandafter |
                                                  #2|#1|&
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifblank #1->\expandafter \ifx 
                               \expandafter \relax \detokenize \expandafter ...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifblank ...\expandafter \ifx \expandafter \relax 
                                                  \detokenize \expandafter {...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifblank ...fter \relax \detokenize \expandafter {
                                                  \@gobble #1?}\relax \expan...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Missing { inserted.
<to be read again> 
                   T
l.111 \end{document}
                    
A left brace was mandatory here, so I've put one in.
You might want to delete and/or insert some corrections
so that I will find a matching right brace soon.
(If you're confused by all this, try typing `I}' now.)

! Use of \expandafter doesn't match its definition.
\ifblank ... #1?}\relax \expandafter \@firstoftwo 
                                                  \else \expandafter \@secon...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra \else.
\ifblank ...relax \expandafter \@firstoftwo \else 
                                                  \expandafter \@secondoftwo...
l.111 \end{document}
                    
I'm ignoring this; it doesn't match any \if.

! Use of \expandafter doesn't match its definition.
\ifblank ...ftwo \else \expandafter \@secondoftwo 
                                                  \fi 
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra \fi.
\ifblank ... \else \expandafter \@secondoftwo \fi 
                                                  
l.111 \end{document}
                    
I'm ignoring this; it doesn't match any \if.

! Use of \expandafter doesn't match its definition.
\ifundef ...oftwo \else \expandafter \expandafter 
                                                  \expandafter \@secondoftwo...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifundef ...xpandafter \expandafter \@secondoftwo 
                                                  \fi \else \expandafter \@f...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\expandonce #1->\unexpanded \expandafter {
                                          #1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Missing { inserted.
<to be read again> 
                   O
l.111 \end{document}
                    
A left brace was mandatory here, so I've put one in.
You might want to delete and/or insert some corrections
so that I will find a matching right brace soon.
(If you're confused by all this, try typing `I}' now.)

! Use of \expandafter doesn't match its definition.
\ifblank #1->\expandafter \ifx 
                               \expandafter \relax \detokenize \expandafter ...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifblank ...\expandafter \ifx \expandafter \relax 
                                                  \detokenize \expandafter {...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifblank ...fter \relax \detokenize \expandafter {
                                                  \@gobble #1?}\relax \expan...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Missing { inserted.
<to be read again> 
                   }
l.111 \end{document}
                    
A left brace was mandatory here, so I've put one in.
You might want to delete and/or insert some corrections
so that I will find a matching right brace soon.
(If you're confused by all this, try typing `I}' now.)

! Use of \expandafter doesn't match its definition.
\ifblank ... #1?}\relax \expandafter \@firstoftwo 
                                                  \else \expandafter \@secon...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra \else.
\ifblank ...relax \expandafter \@firstoftwo \else 
                                                  \expandafter \@secondoftwo...
l.111 \end{document}
                    
I'm ignoring this; it doesn't match any \if.

! Use of \expandafter doesn't match its definition.
\ifblank ...ftwo \else \expandafter \@secondoftwo 
                                                  \fi 
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra \fi.
\ifblank ... \else \expandafter \@secondoftwo \fi 
                                                  
l.111 \end{document}
                    
I'm ignoring this; it doesn't match any \if.


LaTeX Warning:  on input line 110.

! Use of \expandafter doesn't match its definition.
\ifcsdef ...1\endcsname \expandafter \@firstoftwo 
                                                  \else \expandafter \@secon...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! You can't use a prefix with `begin-group character {'.
<to be read again> 
                   {
l.111 \end{document}
                    
I'll pretend you didn't say \long or \outer or \global or \protected.

! Use of \expandafter doesn't match its definition.
\cslet #1#2->\expandafter \let 
                               \csname #1\endcsname #2
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Argument of \etb@tgl@blx@runltx has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \etb@tgl@blx@runltx was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.111 \end{document}
                    
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.111 \end{document}
                    
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.


! Package etoolbox Error: Toggle 'blx@runltx' undefined.

See the etoolbox package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.111 \end{document}
                    
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Use of \expandafter doesn't match its definition.
\ifcsdef ...1\endcsname \expandafter \@firstoftwo 
                                                  \else \expandafter \@secon...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! You can't use a prefix with `begin-group character {'.
<to be read again> 
                   {
l.111 \end{document}
                    
I'll pretend you didn't say \long or \outer or \global or \protected.

! Use of \expandafter doesn't match its definition.
\cslet #1#2->\expandafter \let 
                               \csname #1\endcsname #2
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Argument of \etb@tgl@blx@runbtx has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \etb@tgl@blx@runbtx was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


! Package etoolbox Error: Toggle 'blx@runbtx' undefined.

See the etoolbox package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.111 \end{document}
                    
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra }, or forgotten \endgroup.
\@enddocumenthook ... } {} {\blx@logreq@active {}}
                                                  } {}\def \do ##1{\ifinlist...
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\@enddocumenthook ...} {} {\blx@logreq@active {}}}
                                                   {}\def \do ##1{\ifinlist ...
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Use of \expandafter doesn't match its definition.
\forlistloop #1#2->\expandafter \etb@forlistloop 
                                                 \expandafter {#2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\forlistloop ...er \etb@forlistloop \expandafter {
                                                  #2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra }, or forgotten $.
<recently read> }
                 
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Argument of \do has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.111 \end{document}
                    
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.111 \end{document}
                    
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Use of \expandafter doesn't match its definition.
\forlistloop #1#2->\expandafter \etb@forlistloop 
                                                 \expandafter {#2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\forlistloop ...er \etb@forlistloop \expandafter {
                                                  #2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra }, or forgotten $.
<recently read> }
                 
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Argument of \do has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.111 \end{document}
                    
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.111 \end{document}
                    
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Use of \expandafter doesn't match its definition.
\forlistloop #1#2->\expandafter \etb@forlistloop 
                                                 \expandafter {#2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\forlistloop ...er \etb@forlistloop \expandafter {
                                                  #2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra }, or forgotten \endgroup.
\forlistloop ...\etb@forlistloop \expandafter {#2}
                                                  {#1}
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Argument of \do has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \expandafter doesn't match its definition.
\forlistloop #1#2->\expandafter \etb@forlistloop 
                                                 \expandafter {#2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\forlistloop ...er \etb@forlistloop \expandafter {
                                                  #2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra }, or forgotten \endgroup.
\forlistloop ...\etb@forlistloop \expandafter {#2}
                                                  {#1}
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Argument of \do has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \expandafter doesn't match its definition.
\ifcsdef ...1\endcsname \expandafter \@firstoftwo 
                                                  \else \expandafter \@secon...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Argument of \etb@tgl@blx@defernumbers has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \etb@tgl@blx@defernumbers was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


! Package etoolbox Error: Toggle 'blx@defernumbers' undefined.

See the etoolbox package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.111 \end{document}
                    
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Argument of \@gobbletwo has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobbletwo was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \expandafter doesn't match its definition.
\ifcsdef ...1\endcsname \expandafter \@firstoftwo 
                                                  \else \expandafter \@secon...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Argument of \etb@tgl@blx@runbiber has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \etb@tgl@blx@runbiber was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


! Package etoolbox Error: Toggle 'blx@runbiber' undefined.

See the etoolbox package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.111 \end{document}
                    
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Argument of \@gobbletwo has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobbletwo was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \expandafter doesn't match its definition.
\forlistloop #1#2->\expandafter \etb@forlistloop 
                                                 \expandafter {#2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\forlistloop ...er \etb@forlistloop \expandafter {
                                                  #2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Argument of \do has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Extra }, or forgotten \endgroup.
\@enddocumenthook ...olistloop \blx@localnumaux }}
                                                   {}\endgroup \ifbool {refc...
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Use of \expandafter doesn't match its definition.
\ifcsundef ...name #1\endcsname \expandafter \ifx 
                                                  \csname #1\endcsname \rela...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifcsundef ...two \else \expandafter \expandafter 
                                                  \expandafter \@secondoftwo...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifcsundef ...andafter \expandafter \@secondoftwo 
                                                  \fi \else \expandafter \@f...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package etoolbox Error: Boolean '\ifrefcontextdefaults' undefined.

See the etoolbox package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.111 \end{document}
                    
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Argument of \@gobbletwo has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobbletwo was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \expandafter doesn't match its definition.
\ifbool ...oftwo \else \expandafter \@secondoftwo 
                                                  \fi }
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\ifcsdef ...1\endcsname \expandafter \@firstoftwo 
                                                  \else \expandafter \@secon...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Argument of \etb@tgl@blx@bbldone has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \etb@tgl@blx@bbldone was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


! Package etoolbox Error: Toggle 'blx@bbldone' undefined.

See the etoolbox package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.111 \end{document}
                    
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Argument of \@gobbletwo has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobbletwo was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \expandafter doesn't match its definition.
\forlistloop #1#2->\expandafter \etb@forlistloop 
                                                 \expandafter {#2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\forlistloop ...er \etb@forlistloop \expandafter {
                                                  #2}{#1}
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra }, or forgotten $.
<recently read> }
                 
l.111 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Argument of \do has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.111 \end{document}
                    
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.111 \end{document}
                    
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Use of \expandafter doesn't match its definition.
\ifcsdef ...1\endcsname \expandafter \@firstoftwo 
                                                  \else \expandafter \@secon...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \expandafter doesn't match its definition.
\cslet #1#2->\expandafter \let 
                               \csname #1\endcsname #2
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Argument of \etb@tgl@blx@refcontext has an extra }.
<inserted text> 
                \par 
l.111 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \etb@tgl@blx@refcontext was complete.
<to be read again> 
                   \par 
l.111 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


! Package etoolbox Error: Toggle 'blx@refcontext' undefined.

See the etoolbox package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.111 \end{document}
                    
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Use of \expandafter doesn't match its definition.
\fontencoding  #1->\expandafter \ifx 
                                     \csname T@#1\endcsname \relax \@latex@e...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! LaTeX Error: Encoding scheme `OT1' unknown.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.111 \end{document}
                    
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra \else.
\fontencoding  ...scheme `#1' unknown}\@eha \else 
                                                  \edef \f@encoding {#1}\ifx...
l.111 \end{document}
                    
I'm ignoring this; it doesn't match any \if.

! Use of \expandafter doesn't match its definition.
\pickup@font ->\expandafter \ifx 
                                 \font@name \relax \define@newfont \fi 
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
define@newfont ...ar m@ne expandafter expandafter 
                                                  expandafter split@name exp...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
define@newfont ...andafter expandafter split@name 
                                                  expandafter string font@na...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
define@newfont ...r split@name expandafter string 
                                                  font@name @nil try@load@fo...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Undefined control sequence.
define@newfont ...pandafter string font@name @nil 
                                                  try@load@fontshape expanda...
l.111 \end{document}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of expandafter doesn't match its definition.
try@load@fontshape ->expandafter ifx 
                                     csname f@encoding +f@family endcsname r...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

LaTeX Font Info:    Try loading font information for OT1+cmr on input line 110.

! Use of expandafter doesn't match its definition.
try@load@fontshape ...ily }global expandafter let 
                                                  csname f@encoding +f@famil...
l.111 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

(E:\miketex\tex\latex\base\ot1cmr.fd
File: ot1cmr.fd 2014/09/29 v2.5h Standard LaTeX font definitions

! Use of expandafter doesn't match its definition.
@providesfile ...og {File: #1 #2}expandafter xdef 
                                                  csname ver@#1endcsname {#2...
l.46 .../29 v2.5h Standard LaTeX font definitions]
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
@ifundefined #1->expandafter ifx 
                                 csname #1endcsname relax expandafter @first...
l.47 ...eFontFamily{OT1}{cmr}{\hyphenchar\font45 }
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
@ifundefined ...ame relax expandafter @firstoftwo 
                                                  else expandafter @secondof...
l.47 ...eFontFamily{OT1}{cmr}{\hyphenchar\font45 }
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra else.
@ifundefined ...elax expandafter @firstoftwo else 
                                                  expandafter @secondoftwo fi 
l.47 ...eFontFamily{OT1}{cmr}{\hyphenchar\font45 }
                                                  
I'm ignoring this; it doesn't match any \if.

! Use of expandafter doesn't match its definition.
@ifundefined ...two else expandafter @secondoftwo 
                                                  fi 
l.47 ...eFontFamily{OT1}{cmr}{\hyphenchar\font45 }
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! LaTeX Error: Encoding scheme `OT1' unknown.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.47 ...eFontFamily{OT1}{cmr}{\hyphenchar\font45 }
                                                  
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Use of expandafter doesn't match its definition.
DeclareFontFamily ...a {#3}global expandafter let 
                                                  csname #1+#2expandafter en...
l.47 ...eFontFamily{OT1}{cmr}{\hyphenchar\font45 }
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontFamily ...e #1+#2expandafter endcsname 
                                                  ifx reserved@a @empty @emp...
l.47 ...eFontFamily{OT1}{cmr}{\hyphenchar\font45 }
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Missing endcsname inserted.
<to be read again> 
                   hyphenchar 
l.47 ...eFontFamily{OT1}{cmr}{\hyphenchar\font45 }
                                                  
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Use of expandafter doesn't match its definition.
DeclareFontShape ...catcodes expandafter endgroup 
                                                  DeclareFontShape@ 
l.48 \DeclareFontShape
                      {OT1}{cmr}{m}{n}%
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ #1#2#3#4#5#6->expandafter ifx 
                                                csname #1+#2endcsname relax ...
l.52       <17.28><20.74><24.88>cmr17}{}
                                        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! LaTeX Error: Font family `OT1+cmr' unknown.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.52       <17.28><20.74><24.88>cmr17}{}
                                        
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra else.
DeclareFontShape@ ...ly `#1+#2' unknown}@eha else 
                                                  expandafter xdef csname #1...
l.52       <17.28><20.74><24.88>cmr17}{}
                                        
I'm ignoring this; it doesn't match any \if.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...n}@eha else expandafter xdef 
                                                  csname #1/#2/#3/#4endcsnam...
l.52       <17.28><20.74><24.88>cmr17}{}
                                        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
<argument> <
            5><6><7><8><9><10><12>gen*cmr<10.95>cmr10<14.4>cmr12<17.28><20.7...
l.52       <17.28><20.74><24.88>cmr17}{}
                                        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra endcsname.
DeclareFontShape@ ... noexpand csname #5endcsname 
                                                  }def reserved@a {#6}global...
l.52       <17.28><20.74><24.88>cmr17}{}
                                        
I'm ignoring this, since I wasn't doing a \csname.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...a {#6}global expandafter let 
                                                  csname #5expandafter endcs...
l.52       <17.28><20.74><24.88>cmr17}{}
                                        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...name #5expandafter endcsname 
                                                  ifx reserved@a @empty @emp...
l.52       <17.28><20.74><24.88>cmr17}{}
                                        
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra fi.
DeclareFontShape@ ...@empty else reserved@a fi fi 
                                                  
l.52       <17.28><20.74><24.88>cmr17}{}
                                        
I'm ignoring this; it doesn't match any \if.

! Missing endcsname inserted.
<to be read again> 
                   begingroup 
l.53 \DeclareFontShape
                      {OT1}{cmr}{m}{sl}%
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! You can't use a prefix with `begingroup'.
<to be read again> 
                   begingroup 
l.53 \DeclareFontShape
                      {OT1}{cmr}{m}{sl}%
I'll pretend you didn't say \long or \outer or \global or \protected.

! Use of expandafter doesn't match its definition.
DeclareFontShape ...catcodes expandafter endgroup 
                                                  DeclareFontShape@ 
l.53 \DeclareFontShape
                      {OT1}{cmr}{m}{sl}%
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ #1#2#3#4#5#6->expandafter ifx 
                                                csname #1+#2endcsname relax ...
l.59       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! LaTeX Error: Font family `OT1+cmr' unknown.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.59       }{}
              
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra else.
DeclareFontShape@ ...ly `#1+#2' unknown}@eha else 
                                                  expandafter xdef csname #1...
l.59       }{}
              
I'm ignoring this; it doesn't match any \if.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...n}@eha else expandafter xdef 
                                                  csname #1/#2/#3/#4endcsnam...
l.59       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
<argument> <
            5><6><7>cmsl8<8><9>gen*cmsl<10><10.95>cmsl10<12><14.4><17.28><20...
l.59       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra endcsname.
DeclareFontShape@ ... noexpand csname #5endcsname 
                                                  }def reserved@a {#6}global...
l.59       }{}
              
I'm ignoring this, since I wasn't doing a \csname.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...a {#6}global expandafter let 
                                                  csname #5expandafter endcs...
l.59       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...name #5expandafter endcsname 
                                                  ifx reserved@a @empty @emp...
l.59       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra fi.
DeclareFontShape@ ...@empty else reserved@a fi fi 
                                                  
l.59       }{}
              
I'm ignoring this; it doesn't match any \if.

! Missing endcsname inserted.
<to be read again> 
                   begingroup 
l.60 \DeclareFontShape
                      {OT1}{cmr}{m}{it}%
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! You can't use a prefix with `begingroup'.
<to be read again> 
                   begingroup 
l.60 \DeclareFontShape
                      {OT1}{cmr}{m}{it}%
I'll pretend you didn't say \long or \outer or \global or \protected.

! Use of expandafter doesn't match its definition.
DeclareFontShape ...catcodes expandafter endgroup 
                                                  DeclareFontShape@ 
l.60 \DeclareFontShape
                      {OT1}{cmr}{m}{it}%
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ #1#2#3#4#5#6->expandafter ifx 
                                                csname #1+#2endcsname relax ...
l.67       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! LaTeX Error: Font family `OT1+cmr' unknown.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.67       }{}
              
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra else.
DeclareFontShape@ ...ly `#1+#2' unknown}@eha else 
                                                  expandafter xdef csname #1...
l.67       }{}
              
I'm ignoring this; it doesn't match any \if.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...n}@eha else expandafter xdef 
                                                  csname #1/#2/#3/#4endcsnam...
l.67       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
<argument> <
            5><6><7>cmti7<8>cmti8<9>cmti9<10><10.95>cmti10<12><14.4><17.28><...
l.67       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra endcsname.
DeclareFontShape@ ... noexpand csname #5endcsname 
                                                  }def reserved@a {#6}global...
l.67       }{}
              
I'm ignoring this, since I wasn't doing a \csname.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...a {#6}global expandafter let 
                                                  csname #5expandafter endcs...
l.67       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...name #5expandafter endcsname 
                                                  ifx reserved@a @empty @emp...
l.67       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra fi.
DeclareFontShape@ ...@empty else reserved@a fi fi 
                                                  
l.67       }{}
              
I'm ignoring this; it doesn't match any \if.

! Missing endcsname inserted.
<to be read again> 
                   begingroup 
l.68 \DeclareFontShape
                      {OT1}{cmr}{m}{sc}%
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! You can't use a prefix with `begingroup'.
<to be read again> 
                   begingroup 
l.68 \DeclareFontShape
                      {OT1}{cmr}{m}{sc}%
I'll pretend you didn't say \long or \outer or \global or \protected.

! Use of expandafter doesn't match its definition.
DeclareFontShape ...catcodes expandafter endgroup 
                                                  DeclareFontShape@ 
l.68 \DeclareFontShape
                      {OT1}{cmr}{m}{sc}%
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ #1#2#3#4#5#6->expandafter ifx 
                                                csname #1+#2endcsname relax ...
l.72       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! LaTeX Error: Font family `OT1+cmr' unknown.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.72       }{}
              
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra else.
DeclareFontShape@ ...ly `#1+#2' unknown}@eha else 
                                                  expandafter xdef csname #1...
l.72       }{}
              
I'm ignoring this; it doesn't match any \if.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...n}@eha else expandafter xdef 
                                                  csname #1/#2/#3/#4endcsnam...
l.72       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
<argument> <
            5><6><7><8><9><10><10.95><12><14.4><17.28><20.74><24.88>cmcsc10
l.72       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra endcsname.
DeclareFontShape@ ... noexpand csname #5endcsname 
                                                  }def reserved@a {#6}global...
l.72       }{}
              
I'm ignoring this, since I wasn't doing a \csname.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...a {#6}global expandafter let 
                                                  csname #5expandafter endcs...
l.72       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...name #5expandafter endcsname 
                                                  ifx reserved@a @empty @emp...
l.72       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra fi.
DeclareFontShape@ ...@empty else reserved@a fi fi 
                                                  
l.72       }{}
              
I'm ignoring this; it doesn't match any \if.

! Missing endcsname inserted.
<to be read again> 
                   begingroup 
l.77 \DeclareFontShape
                      {OT1}{cmr}{m}{ui}
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! You can't use a prefix with `begingroup'.
<to be read again> 
                   begingroup 
l.77 \DeclareFontShape
                      {OT1}{cmr}{m}{ui}
I'll pretend you didn't say \long or \outer or \global or \protected.

! Use of expandafter doesn't match its definition.
DeclareFontShape ...catcodes expandafter endgroup 
                                                  DeclareFontShape@ 
l.77 \DeclareFontShape
                      {OT1}{cmr}{m}{ui}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ #1#2#3#4#5#6->expandafter ifx 
                                                csname #1+#2endcsname relax ...
l.81       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! LaTeX Error: Font family `OT1+cmr' unknown.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.81       }{}
              
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra else.
DeclareFontShape@ ...ly `#1+#2' unknown}@eha else 
                                                  expandafter xdef csname #1...
l.81       }{}
              
I'm ignoring this; it doesn't match any \if.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...n}@eha else expandafter xdef 
                                                  csname #1/#2/#3/#4endcsnam...
l.81       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
<argument> <
            5><6><7><8><9><10><10.95><12><14.4><17.28><20.74><24.88>cmu10
l.81       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra endcsname.
DeclareFontShape@ ... noexpand csname #5endcsname 
                                                  }def reserved@a {#6}global...
l.81       }{}
              
I'm ignoring this, since I wasn't doing a \csname.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...a {#6}global expandafter let 
                                                  csname #5expandafter endcs...
l.81       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...name #5expandafter endcsname 
                                                  ifx reserved@a @empty @emp...
l.81       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra fi.
DeclareFontShape@ ...@empty else reserved@a fi fi 
                                                  
l.81       }{}
              
I'm ignoring this; it doesn't match any \if.

! Missing endcsname inserted.
<to be read again> 
                   begingroup 
l.83 \DeclareFontShape
                      {OT1}{cmr}{b}{n}
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! You can't use a prefix with `begingroup'.
<to be read again> 
                   begingroup 
l.83 \DeclareFontShape
                      {OT1}{cmr}{b}{n}
I'll pretend you didn't say \long or \outer or \global or \protected.

! Use of expandafter doesn't match its definition.
DeclareFontShape ...catcodes expandafter endgroup 
                                                  DeclareFontShape@ 
l.83 \DeclareFontShape
                      {OT1}{cmr}{b}{n}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ #1#2#3#4#5#6->expandafter ifx 
                                                csname #1+#2endcsname relax ...
l.87       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! LaTeX Error: Font family `OT1+cmr' unknown.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.87       }{}
              
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra else.
DeclareFontShape@ ...ly `#1+#2' unknown}@eha else 
                                                  expandafter xdef csname #1...
l.87       }{}
              
I'm ignoring this; it doesn't match any \if.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...n}@eha else expandafter xdef 
                                                  csname #1/#2/#3/#4endcsnam...
l.87       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
<argument> <
            5><6><7><8><9><10><10.95><12><14.4><17.28><20.74><24.88>cmb10
l.87       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra endcsname.
DeclareFontShape@ ... noexpand csname #5endcsname 
                                                  }def reserved@a {#6}global...
l.87       }{}
              
I'm ignoring this, since I wasn't doing a \csname.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...a {#6}global expandafter let 
                                                  csname #5expandafter endcs...
l.87       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ ...name #5expandafter endcsname 
                                                  ifx reserved@a @empty @emp...
l.87       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra fi.
DeclareFontShape@ ...@empty else reserved@a fi fi 
                                                  
l.87       }{}
              
I'm ignoring this; it doesn't match any \if.

! Missing endcsname inserted.
<to be read again> 
                   begingroup 
l.89 \DeclareFontShape
                      {OT1}{cmr}{bx}{n}
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! You can't use a prefix with `begingroup'.
<to be read again> 
                   begingroup 
l.89 \DeclareFontShape
                      {OT1}{cmr}{bx}{n}
I'll pretend you didn't say \long or \outer or \global or \protected.

! Use of expandafter doesn't match its definition.
DeclareFontShape ...catcodes expandafter endgroup 
                                                  DeclareFontShape@ 
l.89 \DeclareFontShape
                      {OT1}{cmr}{bx}{n}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of expandafter doesn't match its definition.
DeclareFontShape@ #1#2#3#4#5#6->expandafter ifx 
                                                csname #1+#2endcsname relax ...
l.94       }{}
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! LaTeX Error: Font family `OT1+cmr' unknown.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.94       }{}
              
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra else.
DeclareFontShape@ ...ly `#1+#2' unknown}@eha else 
                                                  expandafter xdef csname #1...
l.94       }{}
              
(That makes 100 errors; please try again.) 
Here is how much of TeX's memory you used:
 7610 strings out of 493335
 128859 string characters out of 3146586
 364960 words of memory out of 3000000
 11068 multiletter control sequences out of 15000+200000
 9454 words of font info for 33 fonts, out of 3000000 for 9000
 1141 hyphenation exceptions out of 8191
 36i,6n,37p,813b,937s stack positions out of 5000i,500n,10000p,200000b,50000s

!  ==> Fatal error occurred, no output PDF file produced!
